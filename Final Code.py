# -*- coding: utf-8 -*-
"""Final Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L1jK95FcoglHOooIvLDOBL2J5wBYtsBI
"""

# 1) ClinicInformation
class ClinicInformation:
    def __init__(self, name, location, contact_numbers, email, website, departments):
        self.__name = name
        self.__location = location
        self.__contact_numbers = contact_numbers[:]  # list of strings
        self.__email = email
        self.__website = website
        self.__departments = departments[:]          # list of strings

    def get_name(self): return self.__name
    def set_name(self, v): self.__name = v
    def get_location(self): return self.__location
    def set_location(self, v): self.__location = v
    def get_contact_numbers(self): return self.__contact_numbers
    def set_contact_numbers(self, v): self.__contact_numbers = v
    def get_email(self): return self.__email
    def set_email(self, v): self.__email = v
    def get_website(self): return self.__website
    def set_website(self, v): self.__website = v
    def get_departments(self): return self.__departments

    def AddClinicInfo(self, dept):
        if dept not in self.__departments:
            self.__departments.append(dept)

    def SetClinicInfo(self, key, value):
        if key == "name": self.__name = value
        elif key == "location": self.__location = value
        elif key == "email": self.__email = value
        elif key == "website": self.__website = value

    def GetClinicInfo(self):
        return {
            "name": self.__name,
            "location": self.__location,
            "contacts": self.__contact_numbers,
            "email": self.__email,
            "website": self.__website,
            "departments": self.__departments
        }

    def display(self):
        print("Clinic:", self.__name, "|", self.__location, "|", self.__email)


# 2) PatientProfile
class PatientProfile:
    def __init__(self, name, date_of_birth, contact, address,
                 emergency_contact, insurance_info, allergies, medical_history):
        self.__name = name
        self.__date_of_birth = date_of_birth
        self.__contact = contact
        self.__address = address
        self.__emergency_contact = emergency_contact
        self.__insurance_info = insurance_info
        self.__allergies = allergies[:]
        self.__medical_history = medical_history[:]

    def get_name(self): return self.__name
    def set_name(self, v): self.__name = v
    def get_contact(self): return self.__contact
    def set_contact(self, v): self.__contact = v
    def get_insurance_info(self): return self.__insurance_info
    def set_insurance_info(self, v): self.__insurance_info = v

    def CreateAccount(self):
        return "Account created for " + self.__name

    def SetProfile(self, new_address=None, new_contact=None):
        if new_address: self.__address = new_address
        if new_contact: self.__contact = new_contact

    def ViewUpcomingAppointments(self, items):
        return items

    def DownloadVisitSummaries(self, ids):
        return "Downloaded " + ", ".join(ids)

    def display(self):
        print("Patient:", self.__name, "| DOB:", self.__date_of_birth)


#  3) DoctorStaffProfile
class DoctorStaffProfile:
    def __init__(self, name, specialty, qualifications, working_hours, contact, availability, role):
        self.__name = name
        self.__specialty = specialty
        self.__qualifications = qualifications
        self.__working_hours = working_hours
        self.__contact = contact
        self.__availability = availability
        self.__role = role

    def get_name(self): return self.__name
    def set_name(self, v): self.__name = v
    def get_specialty(self): return self.__specialty
    def set_specialty(self, v): self.__specialty = v
    def get_availability(self): return self.__availability
    def set_availability(self, v): self.__availability = v
    def get_role(self): return self.__role

    def AssignDoctor(self):
        return "Assigned " + self.__role + " " + self.__name

    def AssignStaff(self):
        return "Assigned Staff " + self.__name

    def display(self):
        print(self.__role + ":", self.__name, "|", self.__specialty, "|", self.__availability)


#  4) AppointmentScheduling
class AppointmentScheduling:
    def __init__(self, appointment_id, appointment_time, doctor, specialty):
        self.__appointment_id = appointment_id
        self.__appointment_time = appointment_time
        self.__doctor = doctor
        self.__specialty = specialty
        self.__status = "BOOKED"

    def get_id(self): return self.__appointment_id
    def get_time(self): return self.__appointment_time
    def get_status(self): return self.__status

    def BookAppointment(self):
        self.__status = "BOOKED"
        return "Booked " + self.__appointment_id

    def RescheduleAppointment(self, new_time):
        self.__appointment_time = new_time
        self.__status = "RESCHEDULED"
        return "Rescheduled " + self.__appointment_id + " to " + new_time

    def CancelAppointment(self):
        self.__status = "CANCELLED"
        return "Cancelled " + self.__appointment_id

    def display(self):
        print("Appt:", self.__appointment_id, "|", self.__appointment_time, "|", self.__status)


# 5) EMR
class EMR:
    def __init__(self, record_id, patient_id, doctor_id, visit_date):
        self.__record_id = record_id
        self.__patient_id = patient_id
        self.__doctor_id = doctor_id
        self.__visit_date = visit_date
        self.__visit_notes = ""
        self.__diagnoses = []
        self.__vitals = {}
        self.__attachments = []

    def CreateRecord(self):
        return "EMR " + self.__record_id + " created"

    def UpdateRecord(self, notes=None, vitals=None):
        if notes: self.__visit_notes = notes
        if vitals: self.__vitals.update(vitals)

    def ViewRecord(self):
        return "EMR[" + self.__record_id + "] " + str(self.__diagnoses) + " " + str(self.__vitals)

    def AddAttachment(self, name):
        self.__attachments.append(name)

    def addDiagnosis(self, dx):
        self.__diagnoses.append(dx)

    def display(self):
        print(self.ViewRecord())


# 6) PrescriptionsandMedications
class PrescriptionsandMedications:
    def __init__(self, prescription_id, patient_id, doctor_id, record_id, prescription_date):
        self.__prescription_id = prescription_id
        self.__patient_id = patient_id
        self.__doctor_id = doctor_id
        self.__record_id = record_id
        self.__prescription_date = prescription_date
        self.__status = "CREATED"
        self.__medications = []

    def generatePrescription(self):
        self.__status = "CREATED"
        return "Prescription " + self.__prescription_id + " created"

    def addMedication(self, med_text):
        self.__medications.append(med_text)

    def viewPrescription(self):
        return "Rx[" + self.__prescription_id + "]: " + "; ".join(self.__medications)

    def printPrescription(self):
        return "Printed Rx " + self.__prescription_id

    def display(self):
        print(self.viewPrescription())


# 7) LabOrderandResults
class LabOrderandResults:
    def __init__(self, order_id, patient_id, doctor_id, record_id, visit_id, test_name):
        self.__order_id = order_id
        self.__patient_id = patient_id
        self.__doctor_id = doctor_id
        self.__record_id = record_id
        self.__visit_id = visit_id
        self.__test_name = test_name
        self.__status = "ORDERED"
        self.__result = ""
        self.__result_date = ""

    def orderTest(self):
        self.__status = "ORDERED"
        return "Lab order " + self.__order_id + " placed"

    def uploadStatus(self, status_text):
        self.__status = status_text

    def uploadResults(self, result_text, result_date):
        self.__result = result_text
        self.__result_date = result_date
        self.__status = "COMPLETED"

    def viewResults(self):
        return "Order " + self.__order_id + ": " + self.__test_name + " -> " + self.__result

    def display(self):
        print(self.viewResults())


#  8) BillingandInsurance
class BillingandInsurance:
    def __init__(self, invoice_id, patient_id, appointment_id,
                 consultation_fee, other_charges, insurance_coverage, payment_method="Unpaid"):
        self.__invoice_id = invoice_id
        self.__patient_id = patient_id
        self.__appointment_id = appointment_id
        self.__consultation_fee = int(consultation_fee)
        self.__other_charges = int(other_charges)
        self.__insurance_coverage = int(insurance_coverage)
        self.__payment_method = payment_method
        self.__status = "DUE"

    def totalAmount(self):
        return max(0, self.__consultation_fee + self.__other_charges - self.__insurance_coverage)

    def generateInvoice(self):
        return "Invoice " + self.__invoice_id + " total " + str(self.totalAmount())

    def applyInsurance(self, coverage):
        self.__insurance_coverage = int(coverage)

    def processPayment(self, method):
        self.__payment_method = method
        self.__status = "PAID"
        return "Paid " + self.__invoice_id + " by " + method

    def viewInvoice(self):
        return "Invoice " + self.__invoice_id + " (" + self.__status + ") " + str(self.totalAmount())

    def display(self):
        print(self.viewInvoice())

# Simple Tests / Demo

if __name__ == "__main__":
    clinic = ClinicInformation("Royal Care Clinic", "Abu Dhabi",
                               ["02-5555000"], "info@rcc.ae", "www.rcc.ae",
                               ["General Practice", "Laboratory", "Pharmacy"])
    clinic.display()

    patient = PatientProfile("Aliyah", "1997-01-15", "050-1234567", "AD City",
                             "050-7654321", "AXA-12345", ["Penicillin"], ["Asthma"])
    doctor = DoctorStaffProfile("Dr. Brown", "General Practitioner", "MBBS",
                                "Mon-Fri 9-5", "050-2223334", "Available", "Doctor")
    print(patient.CreateAccount()); doctor.display()

    slots = ["Next Monday 09:30", "Next Monday 10:00"]
    print("Available:", slots)

    appt = AppointmentScheduling("APT-001", "Next Monday 09:30", doctor.get_name(), doctor.get_specialty())
    print(appt.BookAppointment())

    emr = EMR("EMR-1001", "PAT-001", "DOC-001", "Next Monday")
    print(emr.CreateRecord()); emr.addDiagnosis("Flu")
    emr.UpdateRecord(notes="Rest + fluids", vitals={"Temp": "37.9"}); emr.display()

    rx = PrescriptionsandMedications("RX-550", "PAT-001", "DOC-001", "EMR-1001", "Next Monday")
    print(rx.generatePrescription()); rx.addMedication("Paracetamol 500mg, when needed, 3 days"); rx.display()

    lab = LabOrderandResults("LAB-900", "PAT-001", "DOC-001", "EMR-1001", "VIS-001", "CBC")
    print(lab.orderTest()); lab.uploadResults("Normal", "Next Monday"); lab.display()

    bill = BillingandInsurance("INV-700", "PAT-001", "APT-001", 200, 150, 100)
    print(bill.generateInvoice()); bill.applyInsurance(120); print(bill.processPayment("Card")); bill.display()
    appt2 = AppointmentScheduling("APT-002", "Next Monday 10:00", doctor.get_name(), doctor.get_specialty())
    print(appt2.BookAppointment()); print(appt2.CancelAppointment())
